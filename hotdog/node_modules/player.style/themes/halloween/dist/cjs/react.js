"use client";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// dist/react.js
var react_exports = {};
__export(react_exports, {
  default: () => react_default
});
module.exports = __toCommonJS(react_exports);
var import_react = __toESM(require("react"), 1);
var import_media_theme = __toESM(require("./media-theme.js"), 1);
var react_default = import_react.default.forwardRef((allProps, ref) => {
  let { children, suppressHydrationWarning, ...props } = allProps;
  const elementRef = import_react.default.useRef(null);
  for (let name in props) {
    if (name[0] === "o" && name[1] === "n") {
      const useCapture = name.endsWith("Capture");
      const eventName = name.slice(2, useCapture ? name.length - 7 : void 0).toLowerCase();
      const callback = props[name];
      import_react.default.useEffect(() => {
        const eventTarget = elementRef?.current;
        if (!eventTarget || typeof callback !== "function") return;
        eventTarget.addEventListener(eventName, callback, useCapture);
        return () => {
          eventTarget.removeEventListener(eventName, callback, useCapture);
        };
      }, [elementRef?.current, callback]);
    }
  }
  const attrs = propsToAttrs(props);
  if (typeof window === "undefined" && import_media_theme.default?.getTemplateHTML && import_media_theme.default?.shadowRootOptions) {
    const { mode, delegatesFocus } = import_media_theme.default.shadowRootOptions;
    const templateShadowRoot = import_react.default.createElement("template", {
      shadowrootmode: mode,
      shadowrootdelegatesfocus: delegatesFocus,
      dangerouslySetInnerHTML: {
        __html: import_media_theme.default.getTemplateHTML(attrs)
      }
    });
    children = [templateShadowRoot, children];
  }
  return import_react.default.createElement("media-theme-halloween", {
    ...attrs,
    ref: import_react.default.useCallback(
      (node) => {
        elementRef.current = node;
        if (typeof ref === "function") {
          ref(node);
        } else if (ref !== null) {
          ref.current = node;
        }
      },
      [ref]
    ),
    children,
    suppressHydrationWarning
  });
});
var ReactPropToAttrNameMap = {
  className: "class",
  classname: "class",
  htmlFor: "for",
  viewBox: "viewBox"
};
function propsToAttrs(props = {}) {
  let attrs = {};
  for (let [propName, propValue] of Object.entries(props)) {
    let attrName = toAttrName(propName, propValue);
    if (attrName) attrs[attrName] = toAttrValue(propValue);
  }
  return attrs;
}
function toAttrName(propName, propValue) {
  if (ReactPropToAttrNameMap[propName]) return ReactPropToAttrNameMap[propName];
  if (typeof propValue == "undefined") return void 0;
  if (typeof propValue === "boolean" && !propValue) return void 0;
  if (propName.startsWith("on") && typeof propValue === "function") return void 0;
  if (/[A-Z]/.test(propName)) return propName.toLowerCase();
  return propName;
}
function toAttrValue(propValue) {
  if (typeof propValue === "boolean") return "";
  if (Array.isArray(propValue)) return propValue.join(" ");
  return propValue;
}
